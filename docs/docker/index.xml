<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Kubernetes Workshop</title><link>/kubernetes-workshop/docker/</link><description>Recent content in Docker on Kubernetes Workshop</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><atom:link href="/kubernetes-workshop/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>컨테이너 란?</title><link>/kubernetes-workshop/docker/what-is-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes-workshop/docker/what-is-docker/</guid><description>도커는 컨테이너 기반의 오픈소스 가상화 플랫폼 입니다.
도커는 소프트웨어를 컨테이너라는 표준화된 유닛으로 패키징하며, 이 컨테이너에는 라이브러리, 시스템 도구, 코드, 런타임 등 소프트웨어를 실행하는 데 필요한 모든 것이 포함되어 있습니다. 도커를 사용하면 환경에 구애받지 않고 애플리케이션을 신속하게 배포 및 확장할 수 있습니다.
표준 : 도커는 컨테이너에 대한 산업 표준을 만들었으므로 어디에서나 휴대 할 수 있습니다. 경량 : 컨테이너는 시스템의 OS 시스템 커널을 공유하므로 애플리케이션 당 OS가 필요하지 않으므로 서버 효율성을 높이고 서버 및 라이센스 비용을 줄입니다.</description></item><item><title>컨테이너와 가상 머신</title><link>/kubernetes-workshop/docker/container-vs-vm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/kubernetes-workshop/docker/container-vs-vm/</guid><description>컨테이너 컨테이너는 코드와 종속성을 함께 패키지하는 앱 계층의 추상화입니다. 여러 컨테이너가 동일한 머신에서 실행될 수 있고 OS 커널을 다른 컨테이너와 공유 할 수 있으며, 각 컨테이너는 사용자 공간에서 격리 된 프로세스로 실행됩니다. 컨테이너는 VM보다 공간을 덜 차지하며 (컨테이너 이미지는 일반적으로 수십 MB 크기) 더 많은 응용 프로그램을 처리 할 수 ​​있으며 더 적은 VM과 운영 체제가 필요합니다.
가상 머신 가상 머신 (VM)은 하나의 서버를 여러 서버로 바꾸는 물리적 하드웨어의 추상화입니다. 하이퍼 바이저를 사용하면 단일 VM에서 여러 VM을 실행할 수 있습니다.</description></item></channel></rss>